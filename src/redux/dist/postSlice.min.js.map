{"version":3,"sources":["postSlice.js"],"names":["_toolkit","require","_axios","_interopRequireDefault","fetchPosts","createAsyncThunk","page","response","regeneratorRuntime","async","_context","prev","next","awrap","axios","get","concat","sent","abrupt","data","stop","createPost","post","_context2","createSlice","name","initialState","posts","status","error","reducers","extraReducers","builder","pending","state","addCase","fulfilled","_ref","payload","rejected","_ref2","message","_ref3","unshift","postSlice","reducer"],"mappings":"iIAAA,IAAAA,SAAAC,QAAA,oBACAC,OAAAC,uBAAAF,QAAA,kFAEO,IAAMG,YAAa,EAAAJ,SAAAK,kBAAiB,mBAAoB,SAAOC,GAAP,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MACtCC,OAAAA,QAAMC,IAAN,qDAAAC,OAAsE,GAAPV,EAA/D,gBADsC,KAAA,EAAA,OACvDC,EADuDG,EAAAO,KAAAP,EAAAQ,OAAA,SAEtDX,EAASY,MAF6C,KAAA,EAAA,IAAA,MAAA,OAAAT,EAAAU,0CAKxD,IAAMC,YAAa,EAAArB,SAAAK,kBAAiB,mBAAoB,SAAOiB,GAAP,IAAAf,EAAA,OAAAC,mBAAAC,MAAA,SAAAc,GAAA,OAAA,OAAAA,EAAAZ,KAAAY,EAAAX,MAAA,KAAA,EAAA,OAAAW,EAAAX,KAAA,EAAAJ,mBAAAK,MAP/DC,OAAAA,QAAAQ,KAAA,6CAAAA,IAO+D,KAAA,EAAA,OAP/Df,EAO+DgB,EAAAN,KAAAM,EAAAL,OAAA,SAEtDX,EAASY,MAF6C,KAAA,EAAA,IAAA,MAAA,OAAAI,EAAAH,0CALxD,IAAMhB,WAAa,EAAAJ,SAAAwB,aAAA,CAAqCC,KAAA,QAAAC,aAAA,CAAAC,MAAA,GAAAC,OAAA,KAAAC,MAAA,MAAAC,SAAA,GAkB7DC,cAAe,SAACC,GAlB6CA,EACvDzB,QAAAA,WADuD0B,QAAA,SAAAC,GAAAA,EAAAN,OAAA,YAAAO,QAAA/B,WAAAgC,UAAA,SAAAF,EAAAG,GAAA,IAAAC,EAAAD,EAAAC,QAAAJ,EAAAP,MAAAW,EAAAJ,EAAAN,OAAA,YAAAO,QAAA/B,WAAAmC,SAAA,SAAAL,EAAAM,GAAA,IAAAX,EAAAW,EAAAX,MAAAK,EAAAN,OAAA,SAAxDM,EAAAL,MAAAA,EAAAY,UAKMpB,QAAUA,WAAGe,UAAA,SAAAF,EAAAQ,GAAiB,IAAjBJ,EAAiBI,EAAjBJ,QAAqCJ,EAAAP,MAAAgB,QAAAL,iBAAAM,UAAAC","file":"postSlice.min.js","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async (page) => {\r\n  const response = await axios.get(`https://jsonplaceholder.typicode.com/posts?_start=${page * 10}&_limit=10`);\r\n  return response.data;\r\n});\r\n\r\nexport const createPost = createAsyncThunk('posts/createPost', async (post) => {\r\n  const response = await axios.post('https://jsonplaceholder.typicode.com/posts', post);\r\n  return response.data;\r\n});\r\n\r\nconst postSlice = createSlice({\r\n  name: 'posts',\r\n  initialState: {\r\n    posts: [],\r\n    status: null,\r\n    error: null,\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, { payload }) => {\r\n        state.posts = payload;\r\n        state.status = 'success';\r\n      })\r\n      .addCase(fetchPosts.rejected, (state, { error }) => {\r\n        state.status = 'failed';\r\n        state.error = error.message;\r\n      })\r\n      .addCase(createPost.fulfilled, (state, { payload }) => {\r\n        state.posts.unshift(payload); // Add new post at the beginning\r\n      });\r\n  },\r\n});\r\n\r\nexport default postSlice.reducer;\r\n"]}